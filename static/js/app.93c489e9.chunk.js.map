{"version":3,"sources":["components/StringsNote.js","components/Frequencies.android.js","components/Frequencies.js","helpers/autoCorrelate.js","helpers/helper.js","App.js","assets/correct.mp3"],"names":["StringsNote","props","handlePress","useCallback","a","async","Linking","canOpenURL","openURL","Alert","alert","Pressable","style","styles","container","onPress","createNote","Text","title","noteText","color","noteColor","note","View","textContainer","text","cornerRibbon","bannerText","StyleSheet","create","textAlign","display","justifyContent","alignItems","backgroundColor","width","height","maxWidth","fontSize","marginBottom","fontWeight","textDecorationLine","marginTop","position","top","right","zIndex","borderBottomLeftRadius","borderTopLeftRadius","padding","frets","require","Notes","useState","showAnswer","setShowAnswer","useEffect","Platform","OS","document","addEventListener","e","code","createString","removeEventListener","content","Button","string","toPlay","stringColor","button","buttonText","flex","paddingTop","answer","borderRadius","audioCtx","AudioContext","analyserNode","createAnalyser","buf","Float32Array","noteStrings","noteColors","Frequencies","source","setSource","started","setStart","pitchNote","setPitchNote","pitch","setPitch","useSound","correctSound","play","connect","setInterval","time","getFloatTimeDomainData","ac","sampleRate","SIZE","length","rms","i","val","Math","sqrt","r1","r2","abs","slice","c","Array","fill","j","d","maxval","maxpos","T0","x1","x2","x3","autoCorrelate","frequency","noteNum","log","round","noteFromPitch","sym","parseFloat","toFixed","getMicInput","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","disconnect","input","state","resume","createMediaStreamSource","overflow","Stack","createNativeStackNavigator","App","setNote","setString","setNoteColor","setStringColor","floor","random","toString","Screen","name","options","navigation","headerRight","navigate","headerText","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleAlign","headerTitleStyle","headerLeft","marginRight","marginLeft","module","exports"],"mappings":"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","file":"static/js/app.93c489e9.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\r\nimport { View, Text, StyleSheet, Pressable, Linking } from 'react-native'\r\n\r\nexport default function StringsNote(props) {\r\n\r\n    const handlePress = useCallback(async () => { // Handles the creation of the link that is in the app\r\n        const supported = await Linking.canOpenURL(\"https://github.com/Brandon205/guitario\");\r\n    \r\n        if (supported) { // Open the link with what makes sense depending on the type of link\r\n            await Linking.openURL(\"https://github.com/Brandon205/guitario\");\r\n        } else {\r\n        Alert.alert('Failed to open this url: https://github.com/Brandon205/guitario');\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Pressable style={styles.container} onPress={() => props.createNote()}>\r\n                <Text style={styles.title}>To Play</Text>\r\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n                <View style={styles.textContainer}>\r\n                    <Text style={styles.text}>*Play the note on all of the strings</Text>\r\n                    <Text style={styles.text}>*Tap anywhere on the screen or tap the spacebar to generate a new note*</Text>\r\n                </View>\r\n            </Pressable>\r\n            <View style={styles.cornerRibbon}>\r\n                <Text style={styles.bannerText} onPress={() => handlePress()}>Github</Text>\r\n            </View>\r\n        </>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({ // {color: '#fff', fontWeight: 'bold'}{color: '#fff', marginTop: 10}\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n        width: '100%',\r\n        height: '100%'\r\n    }, \r\n    textContainer: {\r\n        color: '#fff',\r\n        maxWidth: '75%'\r\n    },\r\n    noteText: {\r\n        fontSize: 50,\r\n        color: 'white',\r\n        marginBottom: 18\r\n    },\r\n    title: {\r\n        fontSize: 40,\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n        textDecorationLine: 'underline',\r\n        marginTop: 45,\r\n        marginBottom: 25\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n        marginTop: 10,\r\n    },\r\n    cornerRibbon: {\r\n        backgroundColor: '#FF6300',\r\n        position: 'absolute',\r\n        top: 25,\r\n        right: 0,\r\n        zIndex: 1,\r\n        borderBottomLeftRadius: 25,\r\n        borderTopLeftRadius: 25\r\n    },\r\n    bannerText: {\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        width: 85,\r\n        padding: 10,\r\n    }\r\n})\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { View, Text, StyleSheet, Pressable, Button, Platform, Linking } from 'react-native'\r\nconst frets = require('./frets.json')\r\n\r\nexport default function Notes(props) {\r\n    const [showAnswer, setShowAnswer] = useState(false) // If the user is holding the show answer text set to true\r\n\r\n    useEffect(() => { // Adds listener for web users, also calls the initial createNote and createString\r\n        if (Platform.OS === 'web') {\r\n          document.addEventListener('keypress', (e) => {\r\n            if (e.code === 'Space') {\r\n              setShowAnswer(false)\r\n              props.createNote()\r\n              props.createString()\r\n            }\r\n          })\r\n        }\r\n        props.createNote()\r\n        props.createString()\r\n    \r\n        return () => {\r\n          if (Platform.OS === 'web') {\r\n            document.removeEventListener('keypress')\r\n          }\r\n        }\r\n    }, [])\r\n\r\n    let playThis = () => { // Calls the functions needed to change the note and string\r\n        setShowAnswer(false)\r\n        props.createNote()\r\n        props.createString()\r\n    }\r\n\r\n    const handlePress = useCallback(async () => { // Handles the creation of the link that is in the app\r\n        const supported = await Linking.canOpenURL(\"https://brandon205.github.io/guitario/\");\r\n    \r\n        if (supported) { // Open the link with what makes sense depending on the type of link\r\n            await Linking.openURL(\"https://brandon205.github.io/guitario/\");\r\n        } else {\r\n            Alert.alert('Failed to open this url: https://brandon205.github.io/guitario/');\r\n        }\r\n    });\r\n\r\n    let content; // Dynamically display a link to the main site if mobile users want to go there\r\n    if (Platform.OS !== 'web') {\r\n        content = (\r\n            <Button title=\"Go To the Full Site\" onPress={() => handlePress()} />\r\n        )\r\n    } else {\r\n        content = <></>\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.title}>To Play</Text>\r\n            <Text style={{display: showAnswer ? 'flex' : 'none', color: 'white', fontSize: 30}}>Correct fret: {frets[props.string][props.note]}</Text>\r\n            <Pressable style={styles.toPlay} onPress={() => playThis()}>\r\n                <Text style={styles.noteText}>String: <Text style={{color: props.stringColor}}>{props.string}</Text></Text>\r\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n            </Pressable>\r\n\r\n            <Text style={styles.text}>*Tap above or tap the spacebar to generate a new note to play*</Text>\r\n            <Pressable onPress={() => setShowAnswer(!showAnswer)}>\r\n                <View style={styles.button}>\r\n                    <Text style={styles.buttonText}>Stuck?</Text>\r\n                </View>\r\n            </Pressable>\r\n            {content}\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n    },\r\n    noteText: {\r\n        fontSize: 50,\r\n        color: 'white',\r\n        paddingTop: 20\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n        marginTop: 15,\r\n        maxWidth: '75%'\r\n    },\r\n    title: {\r\n        fontSize: 40,\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n        textDecorationLine: 'underline',\r\n        marginTop: 35\r\n    },\r\n    answer: {\r\n        fontSize: 12,\r\n        marginTop: 15,\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    },\r\n    toPlay: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    button: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 20,\r\n        marginBottom: 50,\r\n        backgroundColor: '#2196F3',\r\n        borderRadius: 20,\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        padding: 10,\r\n        fontSize: 20\r\n    }\r\n})\r\n","import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\r\nimport Notes from './Frequencies.android.js';\r\nimport useSound from 'use-sound';\r\nimport correctSound from '../assets/correct.mp3';\r\nimport { noteFromPitch } from \"../helpers/helper.js\";\r\nimport autoCorrelate from \"../helpers/autoCorrelate.js\";\r\n\r\nconst audioCtx = new AudioContext();\r\nconst analyserNode = audioCtx.createAnalyser();\r\nconst buflen = 2048;\r\nvar buf = new Float32Array(buflen);\r\n\r\nconst noteStrings = [\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\",\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\"\r\n];\r\n\r\nconst noteColors = {\r\n  \"C\": \"#22ff00\",\r\n  \"C#\": \"#00ff38\",\r\n  \"D\": \"#007cff\",\r\n  \"D#\": \"#0500ff\",\r\n  \"E\": \"#4500ea\",\r\n  \"F\": \"#57009e\",\r\n  \"F#\": \"#55004f\",\r\n  \"G\": \"#b30000\",\r\n  \"G#\": \"#ee0000\",\r\n  \"A\": \"#ff6300\",\r\n  \"A#\": \"#ffec00\",\r\n  \"B\": \"#99ff00\"\r\n}\r\n\r\nexport default function Frequencies(props) {\r\n  const [source, setSource] = useState(null);\r\n  const [started, setStart] = useState(false);\r\n  const [pitchNote, setPitchNote] = useState(\"N/A\");\r\n  const [pitch, setPitch] = useState(\"0\");\r\n  const [play] = useSound(correctSound);\r\n\r\n  const updatePitch = (time) => {\r\n    analyserNode.getFloatTimeDomainData(buf);\r\n    var ac = autoCorrelate(buf, audioCtx.sampleRate);\r\n    if (ac > -1) {\r\n      let note = noteFromPitch(ac);\r\n      let sym = noteStrings[note % 12];\r\n      setPitch(parseFloat(ac).toFixed(2) + \" Hz\");\r\n      setPitchNote(sym);\r\n    }\r\n  };\r\n\r\n  useEffect(() => { // When the source changes update it in the app\r\n    if (source != null) {\r\n      source.connect(analyserNode);\r\n    }\r\n  }, [source]);\r\n\r\n  useEffect(() => { // Will check if the last played note is the correct one, if so it will make a new note to play\r\n    if (pitchNote === props.note) {\r\n      play();\r\n      props.createNote()\r\n      props.createString()\r\n    }\r\n  }, [pitchNote])\r\n\r\n  setInterval(updatePitch, 1);\r\n\r\n  const start = async () => {\r\n    const input = await getMicInput();\r\n\r\n    if (audioCtx.state === \"suspended\") {\r\n      await audioCtx.resume();\r\n    }\r\n    setStart(true);\r\n    setSource(audioCtx.createMediaStreamSource(input));\r\n  };\r\n\r\n  const stop = () => {\r\n    source.disconnect(analyserNode);\r\n    setStart(false);\r\n  };\r\n  \r\n  const getMicInput = () => {\r\n    return navigator.mediaDevices.getUserMedia({\r\n      audio: {\r\n        echoCancellation: true,\r\n        autoGainControl: false,\r\n        noiseSuppression: false,\r\n        latency: 0,\r\n      },\r\n    });\r\n  };\r\n\r\n  let content; // For dynamically rendering the Start or Stop button\r\n  if (started) {\r\n    content = (\r\n      <Pressable onPress={stop}>\r\n        <View style={styles.button}>\r\n          <Text style={styles.buttonText}>Stop</Text>\r\n        </View>\r\n      </Pressable>\r\n    )\r\n  } else {\r\n    content = (\r\n      <Pressable onPress={start}>\r\n        <View style={styles.button}>\r\n          <Text style={styles.buttonText}>Start</Text>\r\n        </View>\r\n      </Pressable>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Notes createNote={() => props.createNote()} createString={() => props.createString()} string={props.string} note={props.note} noteColor={props.noteColor} stringColor={props.stringColor}/>\r\n      <Text style={styles.title}>Currently Playing</Text>\r\n      <Text style={{color: noteColors[pitchNote], fontSize: 30, fontWeight: 'bold', marginTop: 12}}>{pitchNote}</Text>\r\n      <Text style={{color: noteColors[pitchNote], fontSize: 30, fontWeight: 'bold', marginTop: 12}}>{pitch}</Text>\r\n      {content}\r\n      <View style={styles.cornerRibbon}>\r\n        <Text style={styles.bannerText} onPress={() => handlePress()}>Github</Text>\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    backgroundColor: '#292B36',\r\n    overflow: 'visible',\r\n    height: '100%'\r\n  },\r\n  title: {\r\n    fontSize: 40,\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    textDecorationLine: 'underline',\r\n    marginTop: 45,\r\n    marginBottom: 15\r\n  },\r\n  button: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n    backgroundColor: '#2196F3',\r\n    borderRadius: 20,\r\n    marginBottom: 70\r\n    },\r\n  buttonText: {\r\n    color: 'white',\r\n    padding: 10,\r\n    fontSize: 20\r\n  },\r\n  cornerRibbon: {\r\n    backgroundColor: '#FF6300',\r\n    position: 'absolute',\r\n    top: 25,\r\n    right: 0,\r\n    zIndex: 1,\r\n    borderBottomLeftRadius: 25,\r\n    borderTopLeftRadius: 25\r\n  },\r\n  bannerText: {\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    width: 80,\r\n    padding: 10,\r\n  }\r\n});\r\n","export default function autoCorrelate(buf, sampleRate) {\r\n    var SIZE = buf.length;\r\n    var rms = 0;\r\n  \r\n    for (let i = 0; i < SIZE; i++) {\r\n      var val = buf[i];\r\n      rms += val * val;\r\n    }\r\n    rms = Math.sqrt(rms / SIZE);\r\n    if (rms < 0.01)\r\n      // not enough signal\r\n      return -1;\r\n  \r\n    var r1 = 0,\r\n      r2 = SIZE - 1,\r\n      thres = 0.2;\r\n    for (let i = 0; i < SIZE / 2; i++)\r\n      if (Math.abs(buf[i]) < thres) {\r\n        r1 = i;\r\n        break;\r\n      }\r\n    for (let i = 1; i < SIZE / 2; i++)\r\n      if (Math.abs(buf[SIZE - i]) < thres) {\r\n        r2 = SIZE - i;\r\n        break;\r\n      }\r\n  \r\n    buf = buf.slice(r1, r2);\r\n    SIZE = buf.length;\r\n  \r\n    var c = new Array(SIZE).fill(0);\r\n    for (let i = 0; i < SIZE; i++)\r\n      for (var j = 0; j < SIZE - i; j++) c[i] = c[i] + buf[j] * buf[j + i];\r\n  \r\n    var d = 0;\r\n    while (c[d] > c[d + 1]) d++;\r\n    var maxval = -1,\r\n      maxpos = -1;\r\n    for (let i = d; i < SIZE; i++) {\r\n      if (c[i] > maxval) {\r\n        maxval = c[i];\r\n        maxpos = i;\r\n      }\r\n    }\r\n    var T0 = maxpos;\r\n  \r\n    var x1 = c[T0 - 1],\r\n      x2 = c[T0],\r\n      x3 = c[T0 + 1];\r\n    var a = (x1 + x3 - 2 * x2) / 2;\r\n    var b = (x3 - x1) / 2;\r\n    if (a) T0 = T0 - b / (2 * a);\r\n  \r\n    return sampleRate / T0;\r\n  };","const noteFromPitch = (frequency) => {\r\n    var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\r\n    return Math.round(noteNum) + 69;\r\n  };\r\n  \r\n  const frequencyFromNoteNumber = (note) => {\r\n    return 440 * Math.pow(2, (note - 69) / 12);\r\n  };\r\n  \r\n  const centsOffFromPitch = (frequency, note) => {\r\n    return Math.floor(\r\n      (1200 * Math.log(frequency / frequencyFromNoteNumber(note))) / Math.log(2)\r\n    );\r\n  };\r\n  \r\n//   const getDetunePercent = (detune) => {\r\n//     if (detune > 0) {\r\n//       return 50 + detune;\r\n//     } else {\r\n//       return 50 + -detune;\r\n//     }\r\n//   };\r\n  \r\n  export { noteFromPitch, centsOffFromPitch };","import React, { useState } from 'react';\r\nimport { Text, Platform, Pressable, StyleSheet } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport StringsNote from './components/StringsNote';\r\nimport Frequencies from './components/Frequencies'; // Will pull either the .android.js or just the .js one based on platform\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  const [note, setNote] = useState(\"A\");\r\n  const [string, setString] = useState(\"6th (E)\");\r\n  const [noteColor, setNoteColor] = useState(\"#33CC33\");\r\n  const [stringColor, setStringColor] = useState(\"#D07173\");\r\n\r\n  let createNote = () => { // Generates a random note and its color and puts both into state\r\n    let tempNote = (Math.floor(Math.random() * 7)).toString()\r\n\r\n    switch (tempNote) {\r\n      case \"0\":\r\n        setNote(\"A\")\r\n        setNoteColor('#ff6300')\r\n        break;\r\n      case \"1\":\r\n        setNote(\"B\")\r\n        setNoteColor('#99ff00')\r\n        break;\r\n      case \"2\":\r\n        setNote(\"C\")\r\n        setNoteColor('#28ff00')\r\n        break;\r\n      case \"3\":\r\n        setNote(\"D\")\r\n        setNoteColor('#007cff')\r\n        break;\r\n      case \"4\":\r\n        setNote(\"E\")\r\n        setNoteColor('#4500ea')\r\n        break;\r\n      case \"5\":\r\n        setNote(\"F\")\r\n        setNoteColor('#57009e')\r\n        break;\r\n      case \"6\":\r\n        setNote(\"G\")\r\n        setNoteColor('#b30000')\r\n        break;\r\n      default:\r\n        setNote(\"Uh oh, this should be a note... Try again\")\r\n    }\r\n  }\r\n\r\n  let createString = () => { // Generates a random string and its color and puts both into state\r\n    let tempString = (Math.floor(Math.random() * 6)).toString()\r\n\r\n    switch (tempString) {\r\n      case \"0\":\r\n        setString(\"6th (E)\")\r\n        setStringColor('#4500ea')\r\n        break;\r\n      case \"1\":\r\n        setString(\"5th (A)\")\r\n        setStringColor('#ff6300')\r\n        break;\r\n      case \"2\":\r\n        setString(\"4th (D)\")\r\n        setStringColor('#007cff')\r\n        break;\r\n      case \"3\":\r\n        setString(\"3rd (G)\")\r\n        setStringColor('#b30000')\r\n        break;\r\n      case \"4\":\r\n        setString(\"2nd (B)\")\r\n        setStringColor('#99ff00')\r\n        break;\r\n      case \"5\":\r\n        setString(\"1st (e)\")\r\n        setStringColor('#4500ea')\r\n        break;\r\n      default:\r\n        setString(\"Uh oh, this should be a string... Try again\")\r\n    }\r\n  }\r\n\r\n  let content;\r\n  if (Platform.OS === 'web') {\r\n    content = (\r\n      <Stack.Screen name=\"Guitario\" options={({ navigation }) => ({\r\n        headerRight: () => (<Pressable title=\"Notes >\" onPress={() => navigation.navigate('Notes')}><Text style={styles.headerText}>NOTES</Text></Pressable>)\r\n      })}>\r\n        { props => <Frequencies {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\r\n      </Stack.Screen>\r\n    )\r\n  } else {\r\n    content = (\r\n      <Stack.Screen name=\"Guitario\" options={({ navigation }) => ({\r\n        headerRight: () => (<Pressable onPress={() => navigation.navigate('Notes')}><Text style={styles.headerText}>NOTES</Text></Pressable>)\r\n      })}>\r\n        { props => <Frequencies {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\r\n      </Stack.Screen>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator screenOptions={{headerStyle: {backgroundColor: '#19191B'}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontSize: 24, fontWeight: 'bold'}}}>\r\n        {content}\r\n        <Stack.Screen name=\"Notes\" options={({ navigation }) => ({\r\n          headerLeft: () => (<Pressable onPress={() => navigation.navigate('Guitario')}><Text style={styles.headerText}>GUITARIO</Text></Pressable>)\r\n        })}>\r\n          { props => <StringsNote {...props} createNote={() => createNote()} note={note} noteColor={noteColor} /> }\r\n        </Stack.Screen>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  headerText: {\r\n    fontSize: 22,\r\n    color: '#fff',\r\n    marginRight: 15,\r\n    marginLeft: 15,\r\n    textDecorationLine: 'underline'\r\n  }\r\n})\r\n","module.exports = __webpack_public_path__ + \"static/media/correct.8cb3a06a.mp3\";"],"sourceRoot":""}