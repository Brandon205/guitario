{"version":3,"sources":["components/Notes.js","components/StringsNote.js","components/Frequencies.js","App.js"],"names":["frets","require","Notes","props","useState","showAnswer","setShowAnswer","useEffect","Platform","OS","document","addEventListener","e","code","createNote","createString","removeEventListener","View","style","styles","container","Text","display","color","fontSize","string","note","toPlay","onTouchEnd","noteText","stringColor","noteColor","marginTop","Pressable","onPress","button","buttonText","StyleSheet","create","textAlign","justifyContent","alignItems","backgroundColor","width","height","paddingTop","answer","fontWeight","borderRadius","padding","Dimensions","get","screenText","Frequencies","freq","audioCtx","window","AudioContext","webkitAudioContext","analyserNode","createAnalyser","Float32Array","fftSize","Array","Stack","createNativeStackNavigator","App","setNote","setString","setNoteColor","setStringColor","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleAlign","headerTitleStyle","Screen","name","options","navigation","headerRight","Button","title","navigate","Math","floor","random","toString","headerLeft"],"mappings":"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","file":"static/js/app.e157ec6c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, StyleSheet, Pressable, Platform} from 'react-native'\r\nconst frets = require('./frets.json')\r\n\r\nexport default function Notes(props) {\r\n    const [showAnswer, setShowAnswer] = useState(false) // If the user is holding the show answer text set to true\r\n\r\n    useEffect(() => { // Adds listener for web users, also calls the initial createNote and createString\r\n        if (Platform.OS === 'web') {\r\n          document.addEventListener('keypress', (e) => {\r\n            if (e.code === 'Space') {\r\n              setShowAnswer(false)\r\n              props.createNote()\r\n              props.createString()\r\n            }\r\n          })\r\n        }\r\n        props.createNote()\r\n        props.createString()\r\n    \r\n        return () => {\r\n          if (Platform.OS === 'web') {\r\n            document.removeEventListener('keypress')\r\n          }\r\n        }\r\n    }, [])\r\n\r\n    let playThis = () => { // Calls the functions needed to change the note and string\r\n        setShowAnswer(false)\r\n        props.createNote()\r\n        props.createString()\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={{display: showAnswer ? 'flex' : 'none', color: 'white', fontSize: 30}}>Correct fret: {frets[props.string][props.note]}</Text>\r\n            <View style={styles.toPlay} onTouchEnd={() => playThis()}>\r\n                <Text style={styles.noteText}>String: <Text style={{color: props.stringColor}}>{props.string}</Text></Text>\r\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n            </View>\r\n\r\n            <Text style={{color: '#fff', marginTop: 15}}>*Tap the words above or hit the spacebar to generate a new note*</Text>\r\n            <Pressable onPress={() => setShowAnswer(!showAnswer)}>\r\n                <View style={styles.button}>\r\n                    <Text style={styles.buttonText}>Stuck?</Text>\r\n                </View>\r\n            </Pressable>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    noteText: {\r\n        fontSize: 50,\r\n        color: 'white',\r\n        paddingTop: 20\r\n    },\r\n    answer: {\r\n        fontSize: 12,\r\n        marginTop: 15,\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    },\r\n    toPlay: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    button: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 20,\r\n        backgroundColor: '#2196F3',\r\n        borderRadius: 20\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        padding: 10,\r\n        fontSize: 20\r\n    }\r\n})\r\n","import React from 'react'\r\nimport { View, Text, StyleSheet, Dimensions } from 'react-native'\r\n\r\nexport default function StringsNote(props) {\r\n    return (\r\n        <View style={styles.container} onTouchStart={() => props.createNote()}>\r\n            <Text style={styles.screenText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n            <Text style={{color: '#fff', fontWeight: 'bold'}}>*Play the above note on all of the strings</Text>\r\n            <Text style={{color: '#fff'}}>*Tap anywhere on the screen to get a new note to play</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n        width: Dimensions.get('window').width,\r\n        height: Dimensions.get('window').height\r\n    }, \r\n    screenText: {\r\n        fontSize: 50,\r\n        color: 'white'\r\n    },\r\n    \r\n})\r\n","import React, { useState } from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\n\r\nexport default function Frequencies() {\r\n    const [freq, setFreq] = useState(0);\r\n\r\n    let audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n    let microphoneStream = null;\r\n    let analyserNode = audioCtx.createAnalyser()\r\n    let audioData = new Float32Array(analyserNode.fftSize);;\r\n    let corrolatedSignal = new Float32Array(analyserNode.fftSize);;\r\n    let localMaxima = new Array(10);\r\n\r\n    function startPitchDetection() {\r\n    navigator.mediaDevices.getUserMedia ({audio: true}).then((stream) => {\r\n            microphoneStream = audioCtx.createMediaStreamSource(stream);\r\n            microphoneStream.connect(analyserNode);\r\n\r\n            audioData = new Float32Array(analyserNode.fftSize);\r\n            corrolatedSignal = new Float32Array(analyserNode.fftSize);\r\n\r\n            setInterval(() => {\r\n                analyserNode.getFloatTimeDomainData(audioData);\r\n\r\n                let pitch = getAutocorrolatedPitch();\r\n\r\n                setFreq(pitch)\r\n                // frequencyDisplayElement.innerHTML = `${pitch}`;\r\n            }, 300);\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        });\r\n}\r\n\r\nfunction getAutocorrolatedPitch() {\r\n    // First: autocorrolate the signal\r\n    let maximaCount = 0;\r\n\r\n    for (let l = 0; l < analyserNode.fftSize; l++) {\r\n        corrolatedSignal[l] = 0;\r\n        for (let i = 0; i < analyserNode.fftSize - l; i++) {\r\n            corrolatedSignal[l] += audioData[i] * audioData[i + l];\r\n        }\r\n        if (l > 1) {\r\n            if ((corrolatedSignal[l - 2] - corrolatedSignal[l - 1]) < 0\r\n                && (corrolatedSignal[l - 1] - corrolatedSignal[l]) > 0) {\r\n                localMaxima[maximaCount] = (l - 1);\r\n                maximaCount++;\r\n                if ((maximaCount >= localMaxima.length))\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Second: find the average distance in samples between maxima\r\n    let maximaMean = localMaxima[0];\r\n\r\n    for (let i = 1; i < maximaCount; i++)\r\n        maximaMean += localMaxima[i] - localMaxima[i - 1];\r\n\r\n    maximaMean /= maximaCount;\r\n\r\n    return audioCtx.sampleRate / maximaMean;\r\n}\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text>Current frequency you are playing: </Text>\r\n            <Text>{freq}</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    }\r\n})","import React, { useState } from 'react';\r\nimport { Button } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport Notes from './components/Notes';\r\nimport StringsNote from './components/StringsNote';\r\nimport Frequencies from './components/Frequencies';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  const [note, setNote] = useState(\"0\")\r\n  const [string, setString] = useState(\"E (6th)\")\r\n  const [noteColor, setNoteColor] = useState(\"#33CC33\")\r\n  const [stringColor, setStringColor] = useState(\"#D07173\")\r\n\r\n  let createNote = () => { // Generates a random note and its color and puts both into state\r\n    let tempNote = (Math.floor(Math.random() * 7)).toString()\r\n\r\n    switch (tempNote) {\r\n      case \"0\":\r\n        setNote(\"A\")\r\n        setNoteColor('#33CC33')\r\n        break;\r\n      case \"1\":\r\n        setNote(\"B\")\r\n        setNoteColor('#8EC9FF')\r\n        break;\r\n      case \"2\":\r\n        setNote(\"C\")\r\n        setNoteColor('#FF0000')\r\n        break;\r\n      case \"3\":\r\n        setNote(\"D\")\r\n        setNoteColor('#FFFF00')\r\n        break;\r\n      case \"4\":\r\n        setNote(\"E\")\r\n        setNoteColor('#C3F2FF')\r\n        break;\r\n      case \"5\":\r\n        setNote(\"F\")\r\n        setNoteColor('#AB0034')\r\n        break;\r\n      case \"6\":\r\n        setNote(\"G\")\r\n        setNoteColor('#FF7F00')\r\n        break;\r\n      default:\r\n        setNote(\"Uh oh, this should be a note...\")\r\n    }\r\n  }\r\n\r\n  let createString = () => { // Generates a random string and its color and puts both into state\r\n    let tempString = (Math.floor(Math.random() * 6)).toString()\r\n\r\n    switch (tempString) {\r\n      case \"0\":\r\n        setString(\"E (6th)\")\r\n        setStringColor('#D07173')\r\n        break;\r\n      case \"1\":\r\n        setString(\"A (5th)\")\r\n        setStringColor('#F3F071')\r\n        break;\r\n      case \"2\":\r\n        setString(\"D (4th)\")\r\n        setStringColor('#1861BF')\r\n        break;\r\n      case \"3\":\r\n        setString(\"G (3rd)\")\r\n        setStringColor('#F3B54D')\r\n        break;\r\n      case \"4\":\r\n        setString(\"B (2nd)\")\r\n        setStringColor('#50C839')\r\n        break;\r\n      case \"5\":\r\n        setString(\"e (1st)\")\r\n        setStringColor('#CF27C4')\r\n        break;\r\n      default:\r\n        setString(\"Uh oh, this should be a string...\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator screenOptions={{headerStyle: {backgroundColor: '#19191B'}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontSize: 24, fontWeight: 'bold'}}}>\r\n        <Stack.Screen name=\"Note Practice\" options={({ navigation }) => ({\r\n          headerRight: () => (<Button title=\"Frequencies ->\" onPress={() => navigation.navigate('Frequencies')} />)\r\n        })}>\r\n          { props => <Notes {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\r\n        </Stack.Screen>\r\n        <Stack.Screen name=\"Frequencies\" options={({ navigation }) => ({\r\n          headerLeft: () => (<Button title=\"<- Notes\" onPress={() => navigation.navigate('Note Practice')} />)\r\n        })}>\r\n          {/* { props => <StringsNote {...props} createNote={() => createNote()} note={note} noteColor={noteColor} /> } */}\r\n          { props => <Frequencies /> }\r\n        </Stack.Screen>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}