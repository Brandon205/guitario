{"version":3,"sources":["components/StringsNote.js","components/Frequencies.android.js","components/Frequencies.js","helpers/autoCorrelate.js","helpers/helper.js","App.js"],"names":["StringsNote","props","handlePress","useCallback","a","async","Linking","canOpenURL","openURL","Alert","alert","Pressable","style","styles","container","onTouch","createNote","Text","title","noteText","color","noteColor","note","View","textContainer","text","cornerRibbon","bannerText","onPress","StyleSheet","create","textAlign","display","justifyContent","alignItems","backgroundColor","width","height","maxWidth","fontSize","marginBottom","fontWeight","textDecorationLine","marginTop","position","top","right","zIndex","borderBottomLeftRadius","borderTopLeftRadius","padding","frets","require","Notes","useState","showAnswer","setShowAnswer","useEffect","Platform","OS","document","addEventListener","e","code","createString","removeEventListener","content","Button","string","toPlay","stringColor","button","buttonText","flex","paddingTop","answer","borderRadius","audioCtx","AudioContext","analyserNode","createAnalyser","buf","Float32Array","noteStrings","noteColors","Frequencies","source","setSource","started","setStart","pitchNote","setPitchNote","setPitchScale","pitch","setPitch","next","setNext","connect","setInterval","time","getFloatTimeDomainData","ac","sampleRate","SIZE","length","rms","i","val","Math","sqrt","r1","r2","abs","slice","c","Array","fill","j","d","maxval","maxpos","T0","x1","x2","x3","autoCorrelate","frequency","noteNum","log","round","noteFromPitch","sym","scl","floor","parseFloat","toFixed","getMicInput","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","disconnect","input","state","resume","createMediaStreamSource","overflow","Stack","createNativeStackNavigator","App","setNote","setString","setNoteColor","setStringColor","random","toString","Screen","name","options","navigation","headerRight","navigate","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleAlign","headerTitleStyle","headerLeft"],"mappings":"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","file":"static/js/app.1fe14d25.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport { View, Text, StyleSheet, Pressable, Linking } from 'react-native'\n\nexport default function StringsNote(props) {\n\n    const handlePress = useCallback(async () => { // Handles the creation of the link that is in the app\n        const supported = await Linking.canOpenURL(\"https://github.com/Brandon205/guitario\");\n    \n        if (supported) { // Open the link with what makes sense depending on the type of link\n            await Linking.openURL(\"https://github.com/Brandon205/guitario\");\n        } else {\n        Alert.alert('Failed to open this url: https://github.com/Brandon205/guitario');\n        }\n    });\n\n    return (\n        <>\n            <Pressable style={styles.container} onTouch={() => props.createNote()}>\n                <Text style={styles.title}>To Play</Text>\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\n                <View style={styles.textContainer}>\n                    <Text style={styles.text}>*Play the note on all of the strings</Text>\n                    <Text style={styles.text}>*Tap anywhere on the screen or tap the spacebar to generate a new note*</Text>\n                </View>\n            </Pressable>\n            <View style={styles.cornerRibbon}>\n                <Text style={styles.bannerText} onPress={() => handlePress()}>Github</Text>\n            </View>\n        </>\n    )\n}\n\nconst styles = StyleSheet.create({ // {color: '#fff', fontWeight: 'bold'}{color: '#fff', marginTop: 10}\n    container: {\n        textAlign: 'center',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '#292B36',\n        width: '100%',\n        height: '100%'\n    }, \n    textContainer: {\n        color: '#fff',\n        maxWidth: '75%'\n    },\n    noteText: {\n        fontSize: 50,\n        color: 'white',\n        marginBottom: 18\n    },\n    title: {\n        fontSize: 40,\n        fontWeight: 'bold',\n        color: 'white',\n        textDecorationLine: 'underline',\n        marginTop: 55,\n        marginBottom: 25\n    },\n    text: {\n        color: '#fff',\n        marginTop: 10,\n    },\n    cornerRibbon: {\n        backgroundColor: '#FF6300',\n        position: 'absolute',\n        top: 25,\n        right: 0,\n        zIndex: 1,\n        borderBottomLeftRadius: 25,\n        borderTopLeftRadius: 25\n    },\n    bannerText: {\n        color: 'white',\n        textAlign: 'center',\n        width: 120,\n        padding: 10,\n    }\n})\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { View, Text, StyleSheet, Pressable, Button, Platform, Linking } from 'react-native'\nconst frets = require('./frets.json')\n\nexport default function Notes(props) {\n    const [showAnswer, setShowAnswer] = useState(false) // If the user is holding the show answer text set to true\n\n    useEffect(() => { // Adds listener for web users, also calls the initial createNote and createString\n        if (Platform.OS === 'web') {\n          document.addEventListener('keypress', (e) => {\n            if (e.code === 'Space') {\n              setShowAnswer(false)\n              props.createNote()\n              props.createString()\n            }\n          })\n        }\n        props.createNote()\n        props.createString()\n    \n        return () => {\n          if (Platform.OS === 'web') {\n            document.removeEventListener('keypress')\n          }\n        }\n    }, [])\n\n    let playThis = () => { // Calls the functions needed to change the note and string\n        setShowAnswer(false)\n        props.createNote()\n        props.createString()\n    }\n\n    const handlePress = useCallback(async () => { // Handles the creation of the link that is in the app\n        const supported = await Linking.canOpenURL(\"https://brandon205.github.io/guitario/\");\n    \n        if (supported) { // Open the link with what makes sense depending on the type of link\n            await Linking.openURL(\"https://brandon205.github.io/guitario/\");\n        } else {\n        Alert.alert('Failed to open this url: https://brandon205.github.io/guitario/');\n        }\n    });\n\n    let content; // Dynamically display a link to the main site if mobile users want to go there\n    if (Platform.OS !== 'web') {\n        content = (\n            <Button title=\"Go To the Full Site\" onPress={() => handlePress()} />\n        )\n    } else {\n        content = <></>\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>To Play</Text>\n            <Text style={{display: showAnswer ? 'flex' : 'none', color: 'white', fontSize: 30}}>Correct fret: {frets[props.string][props.note]}</Text>\n            <Pressable style={styles.toPlay} onPress={() => playThis()}>\n                <Text style={styles.noteText}>String: <Text style={{color: props.stringColor}}>{props.string}</Text></Text>\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\n            </Pressable>\n\n            <Text style={styles.text}>*Tap above or tap the spacebar to generate a new note to play*</Text>\n            <Pressable onPress={() => setShowAnswer(!showAnswer)}>\n                <View style={styles.button}>\n                    <Text style={styles.buttonText}>Stuck?</Text>\n                </View>\n            </Pressable>\n            {content}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        textAlign: 'center',\n        display: 'flex',\n        flex: 1,\n        alignItems: 'center',\n        backgroundColor: '#292B36',\n    },\n    noteText: {\n        fontSize: 50,\n        color: 'white',\n        paddingTop: 20\n    },\n    text: {\n        color: '#fff',\n        marginTop: 15,\n        maxWidth: '75%'\n    },\n    title: {\n        fontSize: 40,\n        fontWeight: 'bold',\n        color: 'white',\n        textDecorationLine: 'underline',\n        marginTop: 35\n    },\n    answer: {\n        fontSize: 12,\n        marginTop: 15,\n        color: 'white',\n        fontWeight: 'bold'\n    },\n    toPlay: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 50,\n        backgroundColor: '#2196F3',\n        borderRadius: 20,\n    },\n    buttonText: {\n        color: 'white',\n        padding: 10,\n        fontSize: 20\n    }\n})\n","import React, { useState, useEffect } from 'react';\nimport { View, Text, Pressable, StyleSheet } from 'react-native';\nimport Notes from './Frequencies.android.js';\nimport { noteFromPitch } from \"../helpers/helper.js\";\nimport autoCorrelate from \"../helpers/autoCorrelate.js\";\n\nconst audioCtx = new AudioContext();\nconst analyserNode = audioCtx.createAnalyser();\nconst buflen = 2048;\nvar buf = new Float32Array(buflen);\n\nconst noteStrings = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"D#\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"G#\",\n  \"A\",\n  \"A#\",\n  \"B\",\n];\n\nconst noteColors = {\n  \"C\": \"#22ff00\",\n  \"C#\": \"#00ff38\",\n  \"D\": \"#007cff\",\n  \"D#\": \"#0500ff\",\n  \"E\": \"#4500ea\",\n  \"F\": \"#57009e\",\n  \"F#\": \"#55004f\",\n  \"G\": \"#b30000\",\n  \"G#\": \"#ee0000\",\n  \"A\": \"#ff6300\",\n  \"A#\": \"#ffec00\",\n  \"B\": \"#99ff00\",\n}\n\nexport default function Frequencies(props) {\n  const [source, setSource] = useState(null);\n  const [started, setStart] = useState(false);\n  const [pitchNote, setPitchNote] = useState(\"N/A\");\n  const [pitchScale, setPitchScale] = useState(\"4\");\n  const [pitch, setPitch] = useState(\"0\");\n  const [next, setNext] = useState(false) // For knowing if next note function has been run yet or not\n\n  const updatePitch = (time) => {\n    analyserNode.getFloatTimeDomainData(buf);\n    var ac = autoCorrelate(buf, audioCtx.sampleRate);\n    if (ac > -1) {\n      let note = noteFromPitch(ac);\n      let sym = noteStrings[note % 12];\n      let scl = Math.floor(note / 12) - 1;\n      // let dtune = centsOffFromPitch(ac, note);\n      setPitch(parseFloat(ac).toFixed(2) + \" Hz\");\n      setPitchNote(sym);\n      setPitchScale(scl);\n      // setDetune(dtune);\n      // setNotification(false);\n      // console.log(note, sym, scl, dtune, ac);\n    }\n  };\n\n  useEffect(() => { // When the source changes update it in the app\n    if (source != null) {\n      source.connect(analyserNode);\n    }\n  }, [source]);\n\n  useEffect(() => { // Using the useEffect so that the state can be updated in App without causing an error\n    if (next) {\n      props.createNote()\n      props.createString()\n    }\n  }, [next]);\n\n  useEffect(() => { // Once the note is updated we need to change our \"toggle\" back otherwise we would update the note like 5 times in a second\n    if (next) {\n      setNext(false)\n    }\n  }, [props.note]);\n\n  setInterval(updatePitch, 1);\n\n  const start = async () => {\n    const input = await getMicInput();\n\n    if (audioCtx.state === \"suspended\") {\n      await audioCtx.resume();\n    }\n    setStart(true);\n    // setNotification(true);\n    // setTimeout(() => setNotification(false), 5000);\n    setSource(audioCtx.createMediaStreamSource(input));\n  };\n\n  const stop = () => {\n    source.disconnect(analyserNode);\n    setStart(false);\n  };\n  \n  const getMicInput = () => {\n    return navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: true,\n        autoGainControl: false,\n        noiseSuppression: false,\n        latency: 0,\n      },\n    });\n  };\n\n  if (pitchNote === props.note) { // Checks if the user is playing the Current Note\n    if (!next) { // If the note isn't already being changed then say it is and the UseEffect above will change it\n      setNext(true)\n    }\n  }\n\n  let content; // For dynamically rendering the Start or Stop button\n  if (started) {\n    content = (\n      <Pressable onPress={stop}>\n        <View style={styles.button}>\n          <Text style={styles.buttonText}>Stop</Text>\n        </View>\n      </Pressable>\n    )\n  } else {\n    content = (\n      <Pressable onPress={start}>\n        <View style={styles.button}>\n          <Text style={styles.buttonText}>Start</Text>\n        </View>\n      </Pressable>\n    )\n  }\n\n  return (\n    <View style={styles.container}>\n      <Notes createNote={() => props.createNote()} createString={() => props.createString()} string={props.string} note={props.note} noteColor={props.noteColor} stringColor={props.stringColor}/>\n      <Text style={styles.title}>Currently Playing</Text>\n      <Text style={{color: noteColors[pitchNote], fontSize: 30, fontWeight: 'bold', marginTop: 12}}>{pitchNote}</Text>\n      <Text style={{color: noteColors[pitchNote], fontSize: 30, fontWeight: 'bold', marginTop: 12}}>{pitch}hz</Text>\n      {content}\n      <View style={styles.cornerRibbon}>\n        <Text style={styles.bannerText} onPress={() => handlePress()}>Github</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    backgroundColor: '#292B36',\n    overflow: 'visible'\n  },\n  title: {\n    fontSize: 40,\n    fontWeight: 'bold',\n    color: 'white',\n    textDecorationLine: 'underline',\n    marginTop: 55,\n    marginBottom: 15\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    backgroundColor: '#2196F3',\n    borderRadius: 20,\n    marginBottom: 70\n    },\n  buttonText: {\n    color: 'white',\n    padding: 10,\n    fontSize: 20\n  },\n  cornerRibbon: {\n    backgroundColor: '#FF6300',\n    position: 'absolute',\n    top: 25,\n    right: 0,\n    zIndex: 1,\n    borderBottomLeftRadius: 25,\n    borderTopLeftRadius: 25\n  },\n  bannerText: {\n    color: 'white',\n    textAlign: 'center',\n    width: 120,\n    padding: 10,\n  }\n});\n","export default function autoCorrelate(buf, sampleRate) {\n    var SIZE = buf.length;\n    var rms = 0;\n  \n    for (let i = 0; i < SIZE; i++) {\n      var val = buf[i];\n      rms += val * val;\n    }\n    rms = Math.sqrt(rms / SIZE);\n    if (rms < 0.01)\n      // not enough signal\n      return -1;\n  \n    var r1 = 0,\n      r2 = SIZE - 1,\n      thres = 0.2;\n    for (let i = 0; i < SIZE / 2; i++)\n      if (Math.abs(buf[i]) < thres) {\n        r1 = i;\n        break;\n      }\n    for (let i = 1; i < SIZE / 2; i++)\n      if (Math.abs(buf[SIZE - i]) < thres) {\n        r2 = SIZE - i;\n        break;\n      }\n  \n    buf = buf.slice(r1, r2);\n    SIZE = buf.length;\n  \n    var c = new Array(SIZE).fill(0);\n    for (let i = 0; i < SIZE; i++)\n      for (var j = 0; j < SIZE - i; j++) c[i] = c[i] + buf[j] * buf[j + i];\n  \n    var d = 0;\n    while (c[d] > c[d + 1]) d++;\n    var maxval = -1,\n      maxpos = -1;\n    for (let i = d; i < SIZE; i++) {\n      if (c[i] > maxval) {\n        maxval = c[i];\n        maxpos = i;\n      }\n    }\n    var T0 = maxpos;\n  \n    var x1 = c[T0 - 1],\n      x2 = c[T0],\n      x3 = c[T0 + 1];\n    var a = (x1 + x3 - 2 * x2) / 2;\n    var b = (x3 - x1) / 2;\n    if (a) T0 = T0 - b / (2 * a);\n  \n    return sampleRate / T0;\n  };","const noteFromPitch = (frequency) => {\n    var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\n    return Math.round(noteNum) + 69;\n  };\n  \n  const frequencyFromNoteNumber = (note) => {\n    return 440 * Math.pow(2, (note - 69) / 12);\n  };\n  \n  const centsOffFromPitch = (frequency, note) => {\n    return Math.floor(\n      (1200 * Math.log(frequency / frequencyFromNoteNumber(note))) / Math.log(2)\n    );\n  };\n  \n//   const getDetunePercent = (detune) => {\n//     if (detune > 0) {\n//       return 50 + detune;\n//     } else {\n//       return 50 + -detune;\n//     }\n//   };\n  \n  export { noteFromPitch, centsOffFromPitch };","import React, { useState } from 'react';\nimport { Button, Platform } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport StringsNote from './components/StringsNote';\nimport Frequencies from './components/Frequencies'; // Will pull either the .android.js or just the .js one based on platform\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  const [note, setNote] = useState(\"0\");\n  const [string, setString] = useState(\"E (6th)\");\n  const [noteColor, setNoteColor] = useState(\"#33CC33\");\n  const [stringColor, setStringColor] = useState(\"#D07173\");\n\n  let createNote = () => { // Generates a random note and its color and puts both into state\n    let tempNote = (Math.floor(Math.random() * 7)).toString()\n\n    switch (tempNote) {\n      case \"0\":\n        setNote(\"A\")\n        setNoteColor('#ff6300')\n        break;\n      case \"1\":\n        setNote(\"B\")\n        setNoteColor('#99ff00')\n        break;\n      case \"2\":\n        setNote(\"C\")\n        setNoteColor('#28ff00')\n        break;\n      case \"3\":\n        setNote(\"D\")\n        setNoteColor('#007cff')\n        break;\n      case \"4\":\n        setNote(\"E\")\n        setNoteColor('#4500ea')\n        break;\n      case \"5\":\n        setNote(\"F\")\n        setNoteColor('#57009e')\n        break;\n      case \"6\":\n        setNote(\"G\")\n        setNoteColor('#b30000')\n        break;\n      default:\n        setNote(\"Uh oh, this should be a note... Try again\")\n    }\n  }\n\n  let createString = () => { // Generates a random string and its color and puts both into state\n    let tempString = (Math.floor(Math.random() * 6)).toString()\n\n    switch (tempString) {\n      case \"0\":\n        setString(\"E (6th)\")\n        setStringColor('#4500ea')\n        break;\n      case \"1\":\n        setString(\"A (5th)\")\n        setStringColor('#ff6300')\n        break;\n      case \"2\":\n        setString(\"D (4th)\")\n        setStringColor('#007cff')\n        break;\n      case \"3\":\n        setString(\"G (3rd)\")\n        setStringColor('#b30000')\n        break;\n      case \"4\":\n        setString(\"B (2nd)\")\n        setStringColor('#99ff00')\n        break;\n      case \"5\":\n        setString(\"e (1st)\")\n        setStringColor('#4500ea')\n        break;\n      default:\n        setString(\"Uh oh, this should be a string... Try again\")\n    }\n  }\n\n  let content;\n  if (Platform.OS === 'web') {\n    content = (\n      <Stack.Screen name=\"Guitario\" options={({ navigation }) => ({\n        headerRight: () => (<Button title=\"Notes >\" onPress={() => navigation.navigate('Notes')} />)\n      })}>\n        { props => <Frequencies {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\n      </Stack.Screen>\n    )\n  } else {\n    content = (\n      <Stack.Screen name=\"Guitario\" options={({ navigation }) => ({\n        headerRight: () => (<Button title=\"Notes >\" onPress={() => navigation.navigate('Notes')} />)\n      })}>\n        { props => <Frequencies {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\n      </Stack.Screen>\n    )\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{headerStyle: {backgroundColor: '#19191B'}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontSize: 24, fontWeight: 'bold'}}}>\n        {content}\n        <Stack.Screen name=\"Notes\" options={({ navigation }) => ({\n          headerLeft: () => (<Button title=\"< Guitario\" onPress={() => navigation.navigate('Guitario')} />)\n        })}>\n          { props => <StringsNote {...props} createNote={() => createNote()} note={note} noteColor={noteColor} /> }\n        </Stack.Screen>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"sourceRoot":""}