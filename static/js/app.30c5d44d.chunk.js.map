{"version":3,"sources":["components/Notes.js","components/StringsNote.js","App.js"],"names":["frets","require","Notes","props","useState","showAnswer","setShowAnswer","useEffect","Platform","OS","document","addEventListener","e","code","createNote","createString","removeEventListener","View","style","styles","container","Text","display","color","fontSize","string","note","Pressable","toPlay","onPress","noteText","stringColor","noteColor","text","button","buttonText","StyleSheet","create","textAlign","justifyContent","alignItems","backgroundColor","width","height","paddingTop","marginTop","maxWidth","answer","fontWeight","borderRadius","padding","StringsNote","onTouchStart","textContainer","marginBottom","Stack","createNativeStackNavigator","App","setNote","setString","setNoteColor","setStringColor","Math","floor","random","toString","NavigationContainer","Navigator","screenOptions","headerStyle","headerTintColor","headerTitleAlign","headerTitleStyle","Screen","name","options","navigation","headerRight","Button","title","navigate","headerLeft"],"mappings":"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","file":"static/js/app.30c5d44d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { View, Text, StyleSheet, Pressable, Platform } from 'react-native'\r\nconst frets = require('./frets.json')\r\n\r\nexport default function Notes(props) {\r\n    const [showAnswer, setShowAnswer] = useState(false) // If the user is holding the show answer text set to true\r\n\r\n    useEffect(() => { // Adds listener for web users, also calls the initial createNote and createString\r\n        if (Platform.OS === 'web') {\r\n          document.addEventListener('keypress', (e) => {\r\n            if (e.code === 'Space') {\r\n              setShowAnswer(false)\r\n              props.createNote()\r\n              props.createString()\r\n            }\r\n          })\r\n        }\r\n        props.createNote()\r\n        props.createString()\r\n    \r\n        return () => {\r\n          if (Platform.OS === 'web') {\r\n            document.removeEventListener('keypress')\r\n          }\r\n        }\r\n    }, [])\r\n\r\n    let playThis = () => { // Calls the functions needed to change the note and string\r\n        setShowAnswer(false)\r\n        props.createNote()\r\n        props.createString()\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={{display: showAnswer ? 'flex' : 'none', color: 'white', fontSize: 30}}>Correct fret: {frets[props.string][props.note]}</Text>\r\n            <Pressable style={styles.toPlay} onPress={() => playThis()}>\r\n                <Text style={styles.noteText}>String: <Text style={{color: props.stringColor}}>{props.string}</Text></Text>\r\n                <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n            </Pressable>\r\n\r\n            <Text style={styles.text}>*Tap the words above or tap the spacebar to generate a new note to play*</Text>\r\n            <Pressable onPress={() => setShowAnswer(!showAnswer)}>\r\n                <View style={styles.button}>\r\n                    <Text style={styles.buttonText}>Stuck?</Text>\r\n                </View>\r\n            </Pressable>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    noteText: {\r\n        fontSize: 50,\r\n        color: 'white',\r\n        paddingTop: 20\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n        marginTop: 15,\r\n        maxWidth: '75%'\r\n    },\r\n    answer: {\r\n        fontSize: 12,\r\n        marginTop: 15,\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    },\r\n    toPlay: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    button: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 20,\r\n        backgroundColor: '#2196F3',\r\n        borderRadius: 20\r\n    },\r\n    buttonText: {\r\n        color: 'white',\r\n        padding: 10,\r\n        fontSize: 20\r\n    }\r\n})\r\n","import React from 'react'\r\nimport { View, Text, StyleSheet, Pressable } from 'react-native'\r\n\r\nexport default function StringsNote(props) {\r\n    return (\r\n        <Pressable style={styles.container} onTouchStart={() => props.createNote()}>\r\n            <Text style={styles.noteText}>Note: <Text style={{color: props.noteColor}}>{props.note}</Text></Text>\r\n            <View style={styles.textContainer}>\r\n                <Text style={styles.text}>*Play the above note on all of the strings</Text>\r\n                <Text style={styles.text}>*Tap anywhere on the screen or tap the spacebar to generate a new note*</Text>\r\n            </View>\r\n        </Pressable>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({ // {color: '#fff', fontWeight: 'bold'}{color: '#fff', marginTop: 10}\r\n    container: {\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        backgroundColor: '#292B36',\r\n        width: '100%',\r\n        height: '100%'\r\n    }, \r\n    textContainer: {\r\n        color: '#fff',\r\n        maxWidth: '75%'\r\n    },\r\n    noteText: {\r\n        fontSize: 50,\r\n        color: 'white',\r\n        marginBottom: 18\r\n    },\r\n    text: {\r\n        color: '#fff',\r\n        marginTop: 10,\r\n    }\r\n    \r\n})\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport Notes from './components/Notes';\r\nimport StringsNote from './components/StringsNote';\r\n// import Frequencies from './components/Frequencies'; // FOR FUTURE RELEASE\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nexport default function App() {\r\n  const [note, setNote] = useState(\"0\")\r\n  const [string, setString] = useState(\"E (6th)\")\r\n  const [noteColor, setNoteColor] = useState(\"#33CC33\")\r\n  const [stringColor, setStringColor] = useState(\"#D07173\")\r\n\r\n  let createNote = () => { // Generates a random note and its color and puts both into state\r\n    let tempNote = (Math.floor(Math.random() * 7)).toString()\r\n\r\n    switch (tempNote) {\r\n      case \"0\":\r\n        setNote(\"A\")\r\n        setNoteColor('#33CC33')\r\n        break;\r\n      case \"1\":\r\n        setNote(\"B\")\r\n        setNoteColor('#8EC9FF')\r\n        break;\r\n      case \"2\":\r\n        setNote(\"C\")\r\n        setNoteColor('#FF0000')\r\n        break;\r\n      case \"3\":\r\n        setNote(\"D\")\r\n        setNoteColor('#FFFF00')\r\n        break;\r\n      case \"4\":\r\n        setNote(\"E\")\r\n        setNoteColor('#C3F2FF')\r\n        break;\r\n      case \"5\":\r\n        setNote(\"F\")\r\n        setNoteColor('#AB0034')\r\n        break;\r\n      case \"6\":\r\n        setNote(\"G\")\r\n        setNoteColor('#FF7F00')\r\n        break;\r\n      default:\r\n        setNote(\"Uh oh, this should be a note... Try again\")\r\n    }\r\n  }\r\n\r\n  let createString = () => { // Generates a random string and its color and puts both into state\r\n    let tempString = (Math.floor(Math.random() * 6)).toString()\r\n\r\n    switch (tempString) {\r\n      case \"0\":\r\n        setString(\"E (6th)\")\r\n        setStringColor('#D07173')\r\n        break;\r\n      case \"1\":\r\n        setString(\"A (5th)\")\r\n        setStringColor('#F3F071')\r\n        break;\r\n      case \"2\":\r\n        setString(\"D (4th)\")\r\n        setStringColor('#1861BF')\r\n        break;\r\n      case \"3\":\r\n        setString(\"G (3rd)\")\r\n        setStringColor('#F3B54D')\r\n        break;\r\n      case \"4\":\r\n        setString(\"B (2nd)\")\r\n        setStringColor('#50C839')\r\n        break;\r\n      case \"5\":\r\n        setString(\"e (1st)\")\r\n        setStringColor('#CF27C4')\r\n        break;\r\n      default:\r\n        setString(\"Uh oh, this should be a string... Try again\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator screenOptions={{headerStyle: {backgroundColor: '#19191B'}, headerTintColor: '#fff', headerTitleAlign: 'center', headerTitleStyle: {fontSize: 24, fontWeight: 'bold'}}}>\r\n        <Stack.Screen name=\"Guitario\" options={({ navigation }) => ({\r\n          // headerRight: () => (<Button title=\"Frequencies ->\" onPress={() => navigation.navigate('Frequencies')} />) // FOR FUTURE RELEASE\r\n          headerRight: () => (<Button title=\"Guitario Notes >\" onPress={() => navigation.navigate('Guitario Notes')} />)\r\n        })}>\r\n          { props => <Notes {...props} createNote={() => createNote()} createString={() => createString()} string={string} note={note} noteColor={noteColor} stringColor={stringColor} /> }\r\n        </Stack.Screen>\r\n        <Stack.Screen name=\"Guitario Notes\" options={({ navigation }) => ({\r\n          headerLeft: () => (<Button title=\"< Guitario\" onPress={() => navigation.navigate('Guitario')} />)\r\n        })}>\r\n          { props => <StringsNote {...props} createNote={() => createNote()} note={note} noteColor={noteColor} /> }\r\n          {/* { props => <Frequencies /> } FOR FUTURE RELEASE*/} \r\n        </Stack.Screen>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}